<?php

namespace Mrapps\CronjobBundle\Repository;

use Mrapps\CronjobBundle\Entity\CronConfigGruppo;
use Mrapps\BackendBundle\Classes\Utils as BackendUtils;

/**
 * CronConfigGruppoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CronConfigGruppoRepository extends \Doctrine\ORM\EntityRepository
{
    public function getNextWeight() {
        
        $em = $this->getEntityManager();
        $maxWeight = intval($em->createQuery("
            SELECT MAX(ccg.weight)
            FROM MrappsCronjobBundle:CronConfigGruppo ccg
        ")->getSingleScalarResult());
        
        return $maxWeight+1;
    }
    
    public function editConfigGruppoForm(array $form) {
        
        $success = false;
        $message = 'Parametri non validi.';
        
        $em = $this->getEntityManager();
        
        $gruppoId = (isset($form['id'])) ? intval($form['id']) : 0;
        $dipendenzaId = (isset($form['dipendenza']['value'])) ? intval($form['dipendenza']['value']) : 0;
        
        /* @var $gruppo \Mrapps\CronjobBundle\Entity\CronConfigGruppo */
        $gruppo = $this->find($gruppoId);
        
        if($gruppo == null) {
            $gruppo = new CronConfigGruppo();
            $gruppo->setWeight($this->getNextWeight());
            $gruppo->setVisible(true);
        }
        
        $nomeGruppo = (isset($form['nome'])) ? trim($form['nome']) : '';

        if(strlen($nomeGruppo) > 0) {

            $gruppo->setNome($nomeGruppo);
            
            //Gruppo dipendente
            $dipendenza = $this->find($dipendenzaId);
            $gruppo->setGruppoDipendente($dipendenza);
            
            $oraMin = (isset($form['oraMin'])) ? BackendUtils::convertTimeStringToDatetime($form['oraMin']) : null;
            $oraMax = (isset($form['oraMax'])) ? BackendUtils::convertTimeStringToDatetime($form['oraMax']) : null;
            $maxIterazioni = (isset($form['maxIterazioni']) && strlen(trim($form['maxIterazioni'])) > 0) ? intval($form['maxIterazioni']) : null;
            
            $gruppo->setOraMin($oraMin);
            $gruppo->setOraMax($oraMax);
            $gruppo->setMaxIterazioni($maxIterazioni);

            $em->persist($gruppo);
            $em->flush();

            $gruppoId = $gruppo->getId();
            $success = true;
            $message = 'Salvato';

        }else {
            $success = false;
            $message = 'Specificare un nome.';
        }
        
        return array(
            'success' => $success,
            'message' => $message,
            'gruppo_id' => $gruppoId,
        );
    }
    
    public function getSelectEntry(CronConfigGruppo $gruppo) {
        return array(
            'value' => $gruppo->getId(),
            'name' => $gruppo->getNome(),
        );
    }
    
    public function deleteGruppo(CronConfigGruppo $gruppo = null) {
        
        $success = false;
        $message = 'Gruppo non trovato.';
        
        if($gruppo !== null) {
            
            $em = $this->getEntityManager();
            
            //Questo gruppo Ã¨ una dipendenza di un altro?
            $numDipendenze = intval($em->createQuery("
                SELECT COUNT(ccg.id)
                FROM MrappsCronjobBundle:CronConfigGruppo ccg
                WHERE ccg.gruppoDipendente = :gruppo
            ")->setParameters(array('gruppo' => $gruppo))->getSingleScalarResult());
            
            if($numDipendenze == 0) {
                
                $em->remove($gruppo);
                $em->flush();
                
                $success = true;
                $message = 'Gruppo eliminato';
                
            }else {
                $success = false;
                $message = 'Impossibile eliminare questo gruppo in quanto Ã¨ stato impostato come dipendenza per almeno un altro gruppo.';
            }
        }
        
        return array(
            'success' => $success,
            'message' => $message,
        );
    }
}
